Backport of:

From 8c62a08faf89663e5633dc5036cd8695c80f1075 Mon Sep 17 00:00:00 2001
From: Bram Moolenaar <Bram@vim.org>
Date: Fri, 8 Feb 2019 14:34:10 +0100
Subject: [PATCH] patch 8.1.0881: can execute shell commands in rvim through
 interfaces

Problem:    Can execute shell commands in rvim through interfaces.
Solution:   Disable using interfaces in restricted mode. Allow for writing
            file with writefile(), histadd() and a few others.
---
 runtime/doc/starting.txt        |  14 +++--
 src/evalfunc.c                  |  22 +++++--
 src/ex_cmds.c                   |   2 +-
 src/ex_docmd.c                  |   7 ++-
 src/if_perl.xs                  |  13 ++--
 src/testdir/Make_all.mak        |   2 +
 src/testdir/test_restricted.vim | 107 ++++++++++++++++++++++++++++++++
 src/version.c                   |   2 +
 8 files changed, 151 insertions(+), 18 deletions(-)
 create mode 100644 src/testdir/test_restricted.vim

--- a/runtime/doc/starting.txt
+++ b/runtime/doc/starting.txt
@@ -245,12 +245,18 @@ a slash.  Thus "-R" means recovery and "
 		changes and writing.
 		{not in Vi}
 
-						*-Z* *restricted-mode* *E145*
+					*-Z* *restricted-mode* *E145* *E981*
 -Z		Restricted mode.  All commands that make use of an external
 		shell are disabled.  This includes suspending with CTRL-Z,
-		":sh", filtering, the system() function, backtick expansion,
-		delete(), rename(), mkdir(), writefile(), libcall(),
-		job_start(), etc.
+		":sh", filtering, the system() function, backtick expansion
+		and libcall().
+		Also disallowed are delete(), rename(), mkdir(), job_start(),
+		etc.
+		Interfaces, such as Python, Ruby and Lua, are also disabled,
+		since they could be used to execute shell commands.  Perl uses
+		the Safe module.
+		Note that the user may still find a loophole to execute a
+		shell command, it has only been made difficult.
 		{not in Vi}
 
 							*-g*
--- a/src/eval.c
+++ b/src/eval.c
@@ -14064,7 +14064,7 @@ f_histadd(typval_T *argvars UNUSED, typv
 #endif
 
     rettv->vval.v_number = FALSE;
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
 #ifdef FEAT_CMDHIST
     str = get_tv_string_chk(&argvars[0]);	/* NULL on type error */
@@ -15249,6 +15249,9 @@ f_luaeval(typval_T *argvars, typval_T *r
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_luaeval(str, argvars + 1, rettv);
 }
@@ -15948,6 +15951,8 @@ f_mzeval(typval_T *argvars, typval_T *re
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
     str = get_tv_string_buf(&argvars[0], buf);
     do_mzeval(str, rettv);
 }
@@ -16157,6 +16162,9 @@ f_py3eval(typval_T *argvars, typval_T *r
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_py3eval(str, rettv);
 }
@@ -16172,6 +16180,9 @@ f_pyeval(typval_T *argvars, typval_T *re
     char_u	*str;
     char_u	buf[NUMBUFLEN];
 
+    if (check_restricted() || check_secure())
+	return;
+
     str = get_tv_string_buf(&argvars[0], buf);
     do_pyeval(str, rettv);
 }
@@ -17821,7 +17832,7 @@ f_setbufvar(typval_T *argvars, typval_T
     typval_T	*varp;
     char_u	nbuf[NUMBUFLEN];
 
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
     (void)get_tv_number(&argvars[0]);	    /* issue errmsg if type error */
     varname = get_tv_string_chk(&argvars[1]);
@@ -18377,7 +18388,7 @@ f_settabvar(typval_T *argvars, typval_T
 
     rettv->vval.v_number = 0;
 
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
 
 #ifdef FEAT_WINDOWS
@@ -20967,7 +20978,7 @@ f_writefile(typval_T *argvars, typval_T
     FILE	*fd;
     int		ret = 0;
 
-    if (check_restricted() || check_secure())
+    if (check_secure())
 	return;
 
     if (argvars[0].v_type != VAR_LIST)
--- a/src/ex_cmds.c
+++ b/src/ex_cmds.c
@@ -4277,7 +4277,7 @@ check_restricted(void)
 {
     if (restricted)
     {
-	EMSG(_("E145: Shell commands not allowed in rvim"));
+	EMSG(_("E145: Shell commands and some functionality not allowed in rvim"));
 	return TRUE;
     }
     return FALSE;
--- a/src/ex_docmd.c
+++ b/src/ex_docmd.c
@@ -2414,11 +2414,16 @@ do_one_cmd(
 #ifdef HAVE_SANDBOX
 	if (sandbox != 0 && !(ea.argt & SBOXOK))
 	{
-	    /* Command not allowed in sandbox. */
+	    // Command not allowed in sandbox.
 	    errormsg = (char_u *)_(e_sandbox);
 	    goto doend;
 	}
 #endif
+	if (restricted != 0 && (ea.argt & RESTRICT))
+	{
+	    errormsg = _("E981: Command not allowed in rvim");
+	    goto doend;
+	}
 	if (!curbuf->b_p_ma && (ea.argt & MODIFY))
 	{
 	    /* Command not allowed in non-'modifiable' buffer */
--- a/src/if_perl.xs
+++ b/src/if_perl.xs
@@ -860,6 +860,7 @@ VIM_init(void)
 #ifdef DYNAMIC_PERL
 static char *e_noperl = N_("Sorry, this command is disabled: the Perl library could not be loaded.");
 #endif
+static char *e_perlsandbox = N_("E299: Perl evaluation forbidden in sandbox without the Safe module");
 
 /*
  * ":perl"
@@ -908,13 +909,12 @@ ex_perl(exarg_T *eap)
 	vim_free(script);
     }
 
-#ifdef HAVE_SANDBOX
-    if (sandbox)
+    if (sandbox || secure)
     {
 	safe = perl_get_sv("VIM::safe", FALSE);
 # ifndef MAKE_TEST  /* avoid a warning for unreachable code */
 	if (safe == NULL || !SvTRUE(safe))
-	    EMSG(_("E299: Perl evaluation forbidden in sandbox without the Safe module"));
+	    EMSG(_(e_perlsandbox));
 	else
 # endif
 	{
@@ -926,7 +926,6 @@ ex_perl(exarg_T *eap)
 	}
     }
     else
-#endif
 	perl_eval_sv(sv, G_DISCARD | G_NOARGS);
 
     SvREFCNT_dec(sv);
@@ -1191,13 +1190,12 @@ do_perleval(char_u *str, typval_T *rettv
 	ENTER;
 	SAVETMPS;
 
-#ifdef HAVE_SANDBOX
-	if (sandbox)
+	if (sandbox || secure)
 	{
 	    safe = get_sv("VIM::safe", FALSE);
 # ifndef MAKE_TEST  /* avoid a warning for unreachable code */
 	    if (safe == NULL || !SvTRUE(safe))
-		EMSG(_("E299: Perl evaluation forbidden in sandbox without the Safe module"));
+		EMSG(_(e_perlsandbox));
 	    else
 # endif
 	    {
@@ -1213,7 +1211,6 @@ do_perleval(char_u *str, typval_T *rettv
 	    }
 	}
 	else
-#endif /* HAVE_SANDBOX */
 	    sv = eval_pv((char *)str, 0);
 
 	if (sv) {
--- a/src/testdir/Make_all.mak
+++ b/src/testdir/Make_all.mak
@@ -178,6 +178,7 @@ NEW_TESTS = test_arglist.res \
 	    test_packadd.res \
 	    test_perl.res \
 	    test_quickfix.res \
+	    test_restricted.res \
 	    test_syntax.res \
 	    test_viminfo.res \
 	    test_viml.res \
--- /dev/null
+++ b/src/testdir/test_restricted.vim
@@ -0,0 +1,125 @@
+" Test for "rvim" or "vim -Z"
+
+" Get the command to run Vim, with -u NONE and --not-a-term arguments.
+" If there is an argument use it instead of "NONE".
+" Returns an empty string on error.
+func GetVimCommand(...)
+  if !filereadable('vimcmd')
+    return ''
+  endif
+  if a:0 == 0
+    let name = 'NONE'
+  else
+    let name = a:1
+  endif
+  " For Unix Makefile writes the command to use in the second line of the
+  " "vimcmd" file, including environment options.
+  " Other Makefiles just write the executable in the first line, so fall back
+  " to that if there is no second line.
+  let lines = readfile('vimcmd')
+  let cmd = get(lines, 1, lines[0])
+  let cmd = substitute(cmd, '-u \f\+', '-u ' . name, '')
+  if cmd !~ '-u '. name
+    let cmd = cmd . ' -u ' . name
+  endif
+  let cmd .= ' --not-a-term'
+  let cmd = substitute(cmd, 'VIMRUNTIME=.*VIMRUNTIME;', '', '')
+  return cmd
+endfunc
+
+func Test_restricted()
+  let cmd = GetVimCommand('Xrestricted')
+  if cmd == ''
+    return
+  endif
+
+  call writefile([
+	\ "silent !ls",
+	\ "call writefile([v:errmsg], 'Xrestrout')",
+	\ "qa!",
+	\ ], 'Xrestricted')
+  call system(cmd . ' -Z')
+  call assert_match('E145:', join(readfile('Xrestrout')))
+
+  call delete('Xrestricted')
+  call delete('Xrestrout')
+endfunc
+
+func Run_restricted_test(ex_cmd, error)
+  let cmd = GetVimCommand('Xrestricted')
+  if cmd == ''
+    return
+  endif
+
+  call writefile([
+	\ a:ex_cmd,
+	\ "call writefile([v:errmsg], 'Xrestrout')",
+	\ "qa!",
+	\ ], 'Xrestricted')
+  call system(cmd . ' -Z')
+  call assert_match(a:error, join(readfile('Xrestrout')))
+
+  call delete('Xrestricted')
+  call delete('Xrestrout')
+endfunc
+
+func Test_restricted_lua()
+  if has('lua')
+    call Run_restricted_test('lua print("Hello, Vim!")', 'E981:')
+    call Run_restricted_test('luado return "hello"', 'E981:')
+    call Run_restricted_test('luafile somefile', 'E981:')
+    call Run_restricted_test('call luaeval("expression")', 'E145:')
+  endif
+endfunc
+
+func Test_restricted_mzscheme()
+  if has('mzscheme')
+    call Run_restricted_test('mzscheme statement', 'E981:')
+    call Run_restricted_test('mzfile somefile', 'E981:')
+    call Run_restricted_test('call mzeval("expression")', 'E145:')
+  endif
+endfunc
+
+func Test_restricted_perl()
+  if has('perl')
+    " TODO: how to make Safe mode fail?
+    " call Run_restricted_test('perl system("ls")', 'E981:')
+    " call Run_restricted_test('perldo system("hello")', 'E981:')
+    " call Run_restricted_test('perlfile somefile', 'E981:')
+    " call Run_restricted_test('call perleval("system(\"ls\")")', 'E145:')
+  endif
+endfunc
+
+func Test_restricted_python()
+  if has('python')
+    call Run_restricted_test('python print "hello"', 'E981:')
+    call Run_restricted_test('pydo return "hello"', 'E981:')
+    call Run_restricted_test('pyfile somefile', 'E981:')
+    call Run_restricted_test('call pyeval("expression")', 'E145:')
+  endif
+endfunc
+
+func Test_restricted_python3()
+  if has('python3')
+    call Run_restricted_test('py3 print "hello"', 'E981:')
+    call Run_restricted_test('py3do return "hello"', 'E981:')
+    call Run_restricted_test('py3file somefile', 'E981:')
+    call Run_restricted_test('call py3eval("expression")', 'E145:')
+  endif
+endfunc
+
+func Test_restricted_ruby()
+  if has('ruby')
+    call Run_restricted_test('ruby print "Hello"', 'E981:')
+    call Run_restricted_test('rubydo print "Hello"', 'E981:')
+    call Run_restricted_test('rubyfile somefile', 'E981:')
+  endif
+endfunc
+
+func Test_restricted_tcl()
+  if has('tcl')
+    call Run_restricted_test('tcl puts "Hello"', 'E981:')
+    call Run_restricted_test('tcldo puts "Hello"', 'E981:')
+    call Run_restricted_test('tclfile somefile', 'E981:')
+  endif
+endfunc
